/**
 * Crossword provider
 * Access to crosswords puzzle generator
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Question.h
 *
 * 
 */

#ifndef Question_H_
#define Question_H_



#include <string>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Question 
{
public:
    Question() = default;
    explicit Question(boost::property_tree::ptree const& pt);
    virtual ~Question() = default;

    Question(const Question& other) = default; // copy constructor
    Question(Question&& other) noexcept = default; // move constructor

    Question& operator=(const Question& other) = default; // copy assignment
    Question& operator=(Question&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Question members

    /// <summary>
    /// 
    /// </summary>
    std::string getQuestion() const;
    void setQuestion(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAnswerStartCell() const;
    void setAnswerStartCell(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAnswerDirection() const;
    void setAnswerDirection(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAnswer() const;
    void setAnswer(std::string value);

protected:
    std::string m_Question = "";
    std::string m_AnswerStartCell = "";
    std::string m_AnswerDirection = "";
    std::string m_Answer = "";
};

std::vector<Question> createQuestionVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Question>(const Question& val) {
    return val.toPropertyTree();
}

template<>
inline Question fromPt<Question>(const boost::property_tree::ptree& pt) {
    Question ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Question_H_ */
