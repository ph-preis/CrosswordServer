/**
 * Crossword provider
 * Access to crosswords puzzle generator
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Cell.h
 *
 * 
 */

#ifndef Cell_H_
#define Cell_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Cell 
{
public:
    Cell() = default;
    explicit Cell(boost::property_tree::ptree const& pt);
    virtual ~Cell() = default;

    Cell(const Cell& other) = default; // copy constructor
    Cell(Cell&& other) noexcept = default; // move constructor

    Cell& operator=(const Cell& other) = default; // copy assignment
    Cell& operator=(Cell&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Cell members

    /// <summary>
    /// 
    /// </summary>
    std::string getColor() const;
    void setColor(std::string value);

protected:
    std::string m_Color = "";
};

std::vector<Cell> createCellVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Cell>(const Cell& val) {
    return val.toPropertyTree();
}

template<>
inline Cell fromPt<Cell>(const boost::property_tree::ptree& pt) {
    Cell ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Cell_H_ */
