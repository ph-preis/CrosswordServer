/**
 * Crossword provider
 * Access to crosswords puzzle generator
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CellQuestions.h
 *
 * 
 */

#ifndef CellQuestions_H_
#define CellQuestions_H_



#include <string>
#include "Question.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "Cell.h"
#include "CellQuestions_allOf.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CellQuestions : public Cell, public CellQuestions_allOf
{
public:
    CellQuestions() = default;
    explicit CellQuestions(boost::property_tree::ptree const& pt);
    virtual ~CellQuestions() = default;

    CellQuestions(const CellQuestions& other) = default; // copy constructor
    CellQuestions(CellQuestions&& other) noexcept = default; // move constructor

    CellQuestions& operator=(const CellQuestions& other) = default; // copy assignment
    CellQuestions& operator=(CellQuestions&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// CellQuestions members

    /// <summary>
    /// 
    /// </summary>
    std::string getColor() const;
    void setColor(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<Question> getQuestions() const;
    void setQuestions(std::vector<Question> value);

protected:
    std::string m_Color = "";
    std::vector<Question> m_Questions;
};

std::vector<CellQuestions> createCellQuestionsVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<CellQuestions>(const CellQuestions& val) {
    return val.toPropertyTree();
}

template<>
inline CellQuestions fromPt<CellQuestions>(const boost::property_tree::ptree& pt) {
    CellQuestions ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* CellQuestions_H_ */
