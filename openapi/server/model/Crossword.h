/**
 * Crossword provider
 * Access to crosswords puzzle generator
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Crossword.h
 *
 * 
 */

#ifndef Crossword_H_
#define Crossword_H_



#include <string>
#include "Crossword_content_inner_inner.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Crossword 
{
public:
    Crossword() = default;
    explicit Crossword(boost::property_tree::ptree const& pt);
    virtual ~Crossword() = default;

    Crossword(const Crossword& other) = default; // copy constructor
    Crossword(Crossword&& other) noexcept = default; // move constructor

    Crossword& operator=(const Crossword& other) = default; // copy assignment
    Crossword& operator=(Crossword&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Crossword members

    /// <summary>
    /// 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getWidth() const;
    void setWidth(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getHeight() const;
    void setHeight(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getSolutionWord() const;
    void setSolutionWord(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::vector<Crossword_content_inner_inner>> getContent() const;
    void setContent(std::vector<std::vector<Crossword_content_inner_inner>> value);

protected:
    int64_t m_Id = 0L;
    std::string m_Name = "";
    int32_t m_Width = 0;
    int32_t m_Height = 0;
    std::string m_SolutionWord = "";
    std::vector<std::vector<Crossword_content_inner_inner>> m_Content;
};

std::vector<Crossword> createCrosswordVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Crossword>(const Crossword& val) {
    return val.toPropertyTree();
}

template<>
inline Crossword fromPt<Crossword>(const boost::property_tree::ptree& pt) {
    Crossword ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Crossword_H_ */
