/**
 * Crossword provider
 * Access to crosswords puzzle generator
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Crossword_content_inner_inner.h
 *
 * 
 */

#ifndef Crossword_content_inner_inner_H_
#define Crossword_content_inner_inner_H_



#include <string>
#include "CellLetter.h"
#include "Question.h"
#include <vector>
#include "CellQuestions.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "CellLetter.h"
#include "CellQuestions.h"
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Crossword_content_inner_inner : public CellLetter, public CellQuestions
{
public:
    Crossword_content_inner_inner() = default;
    explicit Crossword_content_inner_inner(boost::property_tree::ptree const& pt);
    virtual ~Crossword_content_inner_inner() = default;

    Crossword_content_inner_inner(const Crossword_content_inner_inner& other) = default; // copy constructor
    Crossword_content_inner_inner(Crossword_content_inner_inner&& other) noexcept = default; // move constructor

    Crossword_content_inner_inner& operator=(const Crossword_content_inner_inner& other) = default; // copy assignment
    Crossword_content_inner_inner& operator=(Crossword_content_inner_inner&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Crossword_content_inner_inner members

    /// <summary>
    /// 
    /// </summary>
    std::string getColor() const;
    void setColor(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getLetter() const;
    void setLetter(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSolutionWordIndex() const;
    void setSolutionWordIndex(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<Question> getQuestions() const;
    void setQuestions(std::vector<Question> value);

protected:
    std::string m_Color = "";
    std::string m_Letter = "";
    int32_t m_SolutionWordIndex = 0;
    std::vector<Question> m_Questions;
};

std::vector<Crossword_content_inner_inner> createCrossword_content_inner_innerVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Crossword_content_inner_inner>(const Crossword_content_inner_inner& val) {
    return val.toPropertyTree();
}

template<>
inline Crossword_content_inner_inner fromPt<Crossword_content_inner_inner>(const boost::property_tree::ptree& pt) {
    Crossword_content_inner_inner ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Crossword_content_inner_inner_H_ */
